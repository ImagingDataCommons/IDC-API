# [START swagger]
swagger: "2.0"
info:
  description: "IDC API Endpoints, version 1"
  title: "IDC API"
  version: "4.0"
#host: "api-dot-idc-dev.appspot.com"
host: "127.0.0.1:8095"
basePath: "/v1"
# [END swagger]
consumes:
- "application/json"
produces:
- "application/json"
schemes:
#- "https"
- "http"
tags:
  - name: default
  - name: cohorts
  - name: collections
  - name: manifest
  - name: query
  - name: users
paths:
  /about:
    get:
      description: "API Description and Swagger UI link"
      operationId: "root-get"
      produces:
        - "application/json"
      responses:
        200:
          description: "API Description and link to SwaggerUI interface."
          schema:
            $ref: "#/definitions/responseMessage"
        500:
          description: "Server error message"
          schema:
            $ref: "#/definitions/errorMessage"

  /swagger:
    get:
      description: "Swagger UI of the API spec"
      operationId: "swaggerUI"
      produces:
        - "text/html"
      responses:
        200:
          description: "Swagger UI of the API spec"
        500:
          description: "Server error message"
          schema:
            $ref: "#/definitions/errorMessage"

  /oauth2callback:
    get:
      description: "OAuth2 Redirect URI"
      operationId: "oauth2redirect"
      produces:
        - "text/html"
      responses:
        200:
          description: "OAuth2 Redirect URI"
        500:
          description: "Server error message"
          schema:
            $ref: "#/definitions/errorMessage"

  /collections:
    get:
      description: "Get a list of the available collections and versions of each."
      tags:
        - collections
      operationId: "getCollections"
      produces:
        - "application/json"
      responses:
        200:
          description: "A list of the collections available in this API with versions."
          schema:
            $ref: "#/definitions/collectionListResponse"
        500:
          description: "Server error message"
          schema:
            $ref: "#/definitions/errorMessage"

  # Different versions of a collection can have different fields
  /collections/{collection_id}/{version}:
    get:
      description: "Get list of the fields in a version of a collection"
      tags:
        - collections
      operationId: "getFields"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: collection_id
          in: path
          description: "Collection ID"
          type: string
          required: true
        - name: version
          in: path
          description: "Version"
          type: string
          required: true
      responses:
        200:
          description: "A list of the fields in a specific version of a collection"
          schema:
            $ref: "#/definitions/collectionFieldsResponse"
        500:
          description: "Server error message"
          schema:
            $ref: "#/definitions/errorMessage"

  /collections/{collection_id}/{version}/{field_name}:
    get:
      description: "Get metadata for a field in a version of a collection"
      tags:
        - collections
      operationId: "getFields"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: collection_id
          in: path
          description: "Collection ID"
          type: string
          required: true
        - name: version
          in: path
          description: "Version"
          type: string
          required: true
        - name: field_name
          in: path
          description: "Field Name"
          type: string
          required: true
      responses:
        200:
          description: "Metadata for a field in a collection"
          schema:
            $ref: "#/definitions/collectionFieldMetadataResponse"
        500:
          description: "Server error message"
          schema:
            $ref: "#/definitions/errorMessage"

  /cohorts/preview:
    post:
      description: "Preview the files that a cohort would have, given on a supplied filter set."
      tags:
        -   cohorts
      operationId: "cohortPreview"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "filter"
          in: body
          required: true
          description: "Filter to apply to this cohort preview."
          schema:
            type: "object"
            properties:
              filter:
                $ref: "#/definitions/filterSet"
        - name: case_insensitive
          in: query
          description: "BigQuery string comparisons are case sensitive by default - this will perform string comparisons without case sensitivity."
          type: string
          required: false
          default: "True"
          enum: ["True", "False"]
        - name: include_filter
          in: query
          description: "If True, return the filter that defines this cohort."
          type: string
          required: false
          default: "True"
          enum: ["True", "False"]
        - name: include_files
          in: query
          description: "If True, return the list of files matching this cohort's filters."
          type: string
          required: false
          default: "True"
          enum: ["True", "False"]
        - name: include_DOIs
          in: query
          description: "If True, return a digital object identifiers for each study, series and instance in the cohort."
          type: string
          required: false
          default: "True"
          enum: ["True", "False"]
        - name: include_URLs
          in: query
          description: "If True, return one or more URLs for each study, series and instance in the cohort."
          type: string
          required: false
          default: "True"
          enum: ["True", "False"]
        - name: fetch_count
          in: query
          description: "The number of file entries to retrieve this call."
          type: integer
          required: false
          default: 5000
          minimum: 1
          maximum: 40000
        - name: page
          in: query
          description: "The page, in per fetch count file entries (def. 5000 if not provided), to retrieve."
          type: integer
          required: false
          default: 1
          minimum: 1
        - name: offset
          in: query
          description: "The number of file entries to skip in the return set."
          type: integer
          required: false
          default: 0
          minimum: 0
      responses:
        200:
          description: "Information about the specified cohort"
          schema:
            $ref: "#/definitions/cohortDefinition"
        500:
          description: "Server error message"
          schema:
            $ref: "#/definitions/errorMessage"

  /cohorts:
    get:
      description: "Get metadata on the user's cohorts."
      tags:
        - cohorts
      operationId: "getCohorts"
      produces:
        - "application/json"
      responses:
        200:
          description: "A list of the user's cohorts."
          schema:
            $ref: "#/definitions/cohortList"
        500:
          description: "Server error message"
          schema:
            $ref: "#/definitions/errorMessage"
      security:
        - google_id_token: []

    post:
      description: "Save the supplied filter set as a cohort."
      tags:
        -   cohorts
      operationId: "cohortCreate"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: body
          name: "cohort_def"
          required: true
          description: "Filters, name, and description used to create this cohort."
          schema:
            $ref: "#/definitions/cohortSpec"
        - name: case_insensitive
          in: query
          description: "BigQuery string comparisons are case sensitive by default - this will perform string comparisons without case sensitivity."
          type: string
          required: false
          default: "True"
          enum: ["True", "False"]
        - name: include_filter
          in: query
          description: "If True, return the filter that defines this cohort."
          type: string
          required: false
          default: "True"
          enum: ["True", "False"]
        - name: include_files
          in: query
          description: "If True, return the list of files matching this cohort's filters."
          type: string
          required: false
          default: "True"
          enum: ["True", "False"]
        - name: include_DOIs
          in: query
          description: "If True, return a digital object identifiers study, series and instance in the cohort."
          type: string
          required: false
          default: "True"
          enum: ["True", "False"]
        - name: include_URLs
          in: query
          description: "If True, return one or more URLs for for each each study, series and instance in the cohort."
          type: string
          required: false
          default: "True"
          enum: ["True", "False"]
        - name: fetch_count
          in: query
          description: "The number of file entries to retrieve this call."
          type: integer
          required: false
          default: 5000
          minimum: 1
          maximum: 40000
        - name: page
          in: query
          description: "The page, in per fetch count file entries (def. 5000 if not provided), to retrieve."
          type: integer
          required: false
          default: 1
          minimum: 1
        - name: offset
          in: query
          description: "The number of file entries to skip in the return set."
          type: integer
          required: false
          default: 0
          minimum: 0
      responses:
        200:
          description: "Summary information about the cohort generated."
          schema:
            $ref: "#/definitions/cohortDefinition"
        500:
          description: "Server error message"
          schema:
            $ref: "#/definitions/errorMessage"
      security:
        - google_id_token: []

  /cohorts/{cohort_id}:
    get:
      description: "Get information for the specified cohort."
      tags:
        -   cohorts
      operationId: "getCohort"
      produces:
        - "application/json"
      parameters:
        - name: cohort_id
          in: path
          description: "Numeric IDC Cohort ID"
          type: integer
          required: true
        - name: include_filter
          in: query
          description: "If True, return the filter that defines this cohort."
          type: string
          required: false
          default: "True"
          enum: ["True", "False"]
        - name: include_files
          in: query
          description: "If True, return the list of files matching this cohort's filters."
          type: string
          required: false
          default: "True"
          enum: ["True", "False"]
        - name: include_DOIs
          in: query
          description: "If True, return a digital object identifiers for each study, series and instance in the cohort."
          type: string
          required: false
          default: "True"
          enum: ["True", "False"]
        - name: include_URLs
          in: query
          description: "If True, return one or more URLs for each study, series and instance in the cohort."
          type: string
          required: false
          default: "True"
          enum: ["True", "False"]
        - name: fetch_count
          in: query
          description: "The number of file entries to retrieve this call."
          type: integer
          required: false
          default: 5000
          minimum: 1
          maximum: 40000
        - name: page
          in: query
          description: "The page, in per fetch count file entries (def. 5000 if not provided), to retrieve."
          type: integer
          required: false
          default: 1
          minimum: 1
        - name: offset
          in: query
          description: "The number of file entries to skip in the return set."
          type: integer
          required: false
          default: 0
          minimum: 0
      responses:
        200:
          description: "Information about the specified cohort"
          schema:
            $ref: "#/definitions/cohortDefinition"
        500:
          description: "Server error message"
          schema:
            $ref: "#/definitions/errorMessage"
      security:
        - google_id_token: []
    delete:
      description: "Delete the specified cohort."
      tags:
        -   cohorts
      operationId: "cohortDelete"
      produces:
        - "application/json"
      parameters:
        - name: cohort_id
          in: path
          description: "Numeric IDC Cohort ID"
          type: integer
          required: true
        - name: include_filter
          in: query
          description: "If True, return the filter that defines this cohort."
          type: string
          required: false
          default: "False"
          enum: ["True", "False"]
        - name: include_files
          in: query
          description: "If True, return the list of files matching this cohort's filters."
          type: string
          required: false
          default: "False"
          enum: ["True", "False"]
        - name: include_DOIs
          in: query
          description: "If True, return a digital object identifiers for each study, series and instance in the cohort."
          type: string
          required: false
          default: "True"
          enum: ["True", "False"]
        - name: include_URLs
          in: query
          description: "If True, return one or more URLs for each study, series and instance in the cohort."
          type: string
          required: false
          default: "True"
          enum: ["True", "False"]
        - name: fetch_count
          in: query
          description: "The number of file entries to retrieve this call."
          type: integer
          required: false
          default: 5000
          minimum: 1
          maximum: 40000
        - name: page
          in: query
          description: "The page, in per fetch count file entries (def. 5000 if not provided), to retrieve."
          type: integer
          required: false
          default: 1
          minimum: 1
        - name: offset
          in: query
          description: "The number of file entries to skip in the return set."
          type: integer
          required: false
          default: 0
          minimum: 0
      responses:
        200:
          description: "Summary information about the deleted cohort."
          schema:
            $ref: "#/definitions/cohortDefinition"
        500:
          description: "Server error message"
          schema:
            $ref: "#/definitions/errorMessage"
      security:
        - google_id_token: []


  /users/account_details:
    get:
      description: "Retrieve current account information."
      tags:
        -   users
      operationId: "getUserAccountDetails"
      produces:
        - "application/json"
      responses:
        200:
          description: "Current account information for the validated user."
          schema:
            $ref: "#/definitions/accountDetailsResponse"
        400:
          description: "Invalid request error message"
          schema:
            $ref: "#/definitions/errorMessage"
        500:
          description: "Server error message"
          schema:
            $ref: "#/definitions/errorMessage"
      security:
        - google_id_token: []

definitions:
  responseMessage:
    type: "object"
    properties:
      message:
        type: "string"
      documentation:
        type: "string"
#      code:
#        type: "integer"

  collectionListResponse:
    type: "array"
    items:
      type: "object"
      properties:
        name:
          type: "string"
          $ref: "#/definitions/collectionNames"
        description:
          type: "string"
        versions:
          type: "array"
          items:
            type: "object"
            properties:
              version:
                type: "string"
              release_date:
                type: "date"

  collectionFieldsResponse:
    type: "array"
    items:
      type: "string"

  collectionFieldMetadataResponse:
    type: "object"
    properties:
      fieldName:
        type: "string"
      description:
        type: "string"
      fieldType:
        type: "string"
        enum: ["string", "date", "time", "timestamp", "integer", "float", "record", "array"]
      enumerated_values:
        type: "array"
        items:
          type: "string"

  cohortList:
    type: "array"
    items:
      $ref: "#/definitions/cohortMetadata"

  cohortMetadata:
    type: "object"
    properties:
      id:
        type: "integer"
      name:
        type: "string"
      description:
        type: "string"
      file_count:
        type: "integer"
      hashes:
        type: "array"
        items:
          type: "object"
          properties:
            hashtype:
              type: "string"
              enum: ["md5", "sha256", "sha512"]
            hash:
              type: "string"

  cohortDefinition:
    type: "object"
    properties:
      filter:
        $ref: "#/definitions/FilterSet"
      data:
        $ref: "#/definitions/cohortObject"
#      code:
#        type: "integer"
#    example:
#      name: "An example cohort name."
#      filters:
#        disease_code: ["BRCA","READ"]

  cohortSpec:
    type: "object"
    properties:
      name:
        type: "string"
      description:
        type: "string"
      filters:
        $ref: "#/definitions/filterSet"

  filterSet:
    type: "object"
    properties:
      collections:
        type: "array"
        items:
          "#/definitions/collection"
      clinical:
        $ref: "#/definitions/clinicalFilterSet"
      imaging:
        $ref: "#/definitions/imagingFilterSet"
      derived:
        $ref: "#/definitions/derivedFilterSet"

  clinicalFilterSet:
    type: "object"
    properties:
      disease_code:
        type: "array"
        items:
          type: "string"
      vital_status:
        type: "array"
        items:
          type: "string"
      gender:
        type: "array"
        items:
          type: "string"
      age_at_diagnosis:
        type: "array"
        items:
          type: "string"
      sample_type:
        type: "array"
        items:
          type: "string"
      tumor_tissue_site:
        type: "array"
        items:
          type: "string"
      histological_site:
        type: "array"
        items:
          type: "string"
      pathological_stage:
        type: "array"
        items:
          type: "string"
      person_neoplasm_cancer_status:
        type: "array"
        items:
          type: "string"
      neoplasm_histologic_grade:
        type: "array"
        items:
          type: "string"
      bmi:
        type: "array"
        items:
          type: "string"
      hpv_status:
        type: "array"
        items:
          type: "string"
      residual_tumor:
        type: "array"
        items:
          type: "string"
      tobacco_smoking_history:
        type: "array"
        items:
          type: "string"
      race:
        type: "array"
        items:
          type: "string"
      ethnicity:
        type: "array"
        items:
          type: "string"
      days_to_last_known_alive:
        type: "array"
        items:
          type: "string"
      menopause_status:
        type: "array"
        items:
          type: "string"
      year_of_diagnosis:
        type: "array"
        items:
          type: "string"

  imagingFilterSet:
    type: "object"
    properties:
      Modality:
        type: "array"
        items:
          $ref: "#/definitions/modalities"
      SOPInstanceUID:
        type: "array"
        items:
           type: "string"
      StudyDescription:
        type: "array"
        items:
           type: "string"
      SeriesDescription:
        type: "array"
        items:
           type: "string"
      BodyPartExamined:
        type: "array"
        items:
           type: "string"
      ScanningSequence:
        type: "array"
        items:
           type: "string"
           enum: ["SE", "IR", "GR", "EP", "RM"]
      SequenceVariant:
        type: "array"
        items:
           type: "string"
           enum: ["SK", "MTC", "SS", "TRSS", "SP", "MP", "OSP", "NONE"]
      ScanOptions:
        type: "array"
        items:
           type: "string"
           enum: ["EKG", "PHY", "TOMO", "CHASE", "ROTA"]
      SliceThickness:
        type: "array"
        items:
           type: "integer"
      SliceThickness_btw:
        type: "array"
        items:
           type: "integer"
      SliceThickness_gte:
        type: "array"
        items:
           type: "integer"
      SliceThickness_lte:
        type: "array"
        items:
           type: "integer"

  derivedFilterSet:
    type: "object"
    properties:

  cohortObject:
    type: "object"
    properties:
      collections:
        type: "array"
        items:
          $ref: "#/definitions/collectionObject"

  collectionObject:
    type: "object"
    properities:
      collection:
        type: "object"
        properties:
          collection_name:
            type: "string"
          version:
            type: "string"
      patients:
        type: "array"
        items:
          $ref: "#/definitions/patientObject"

  patientObject:
    type: "object"
    properities:
      patient:
        patient_name:
          type: "string"
      studies:
        type: "array"
        items:
          $ref: "#/definitions/studyObject"

  studyObject:
    type: "object"
    properities:
      study:
        type: "object"
        properties:
          StudyInstanceUID:
            type: "string"
          DOI:
            type: "string"
          AccessMethods:
            type: "array"
            items:
              $ref: "#/definitions/accessMethod"
      series:
        type: "array"
        items:
          $ref: "#/definitions/seriesObject"


  seriesObject:
    type: "object"
    properities:
      series:
        type: "object"
        properties:
          SeriesInstanceUID:
            type: "string"
          DOI:
            type: "string"
          AccessMethods:
            type: "array"
            items:
              $ref: "#/definitions/accessMethod"
      instances:
        type: "array"
        items:
          $ref: "#/definitions/instanceObject"

  instanceObject:
    type: "object"
    properities:
      instance:
        type: "object"
        properties:
          SOPInstanceUID:
            type: "string"
          DOI:
            type: "string"
          AccessMethods:
            type: "array"
            items:
              $ref: "#/definitions/accessMethod"

  collection:
    type: "object"
    properties:
      name:
        $ref: "#/definitions/collectionNames"
      versions:
        type: "array"
        items:
          type: "string"

  accessMethod:
    type: "object"
    properties:
      access_url:
        type: "string"
      region:
        type: "string"
      type:
        type: "string"
        enum: ["s3", "gs", "ftp", "gsiftp", "globus", "htsget", "https", "dcm", "file"]

  collectionNames:
    type: "string"
    enum: [
      "tcga_blca",
      "tcga_brca",
      "tcga_cesc",
      "tcga_coad",
      "tcga_esca",
      "tcga_gbm",
      "tcga_hnsc",
      "tcga_kich",
      "tcga_kirc",
      "tcga_kirp",
      "tcga_lgg",
      "tcga_luad",
      "tcga_kusc",
      "tcga_ov",
      "tcga_prad",
      "tcga_reas",
      "tcga_sarc",
      "tcga_stad",
      "tcga_thca",
      "tcga_ucec"
      ]

  modalities:
    type: "string"
    enum: [
      "CR",
      "CT",
      "CTPT",
      "DX",
      "FUSION",
      "KO",
      "MR",
      "MG",
      "NM",
      "OT",
      "PR",
      "PT",
      "REG",
      "RTDOSE",
      "RTPLAN",
      "RTSTRUCT",
      "RWV",
      "SC",
      "SEG",
      "SR",
      "US"
      ]

  anatomicalSites:
    type: "string"
    enum: [
      "BREAST",
      "ABD PEL",
      "ABD PELV",
      "ABDOMEN",
      "ABDOMENPELVIS",
      "BD CT ABD WO_W",
      "BLADDER",
      "BRAIN",
      "CAP",
      "CAROTID",
      "CERVIX",
      "CHEST",
      "CHEST_ABDOMEN",
      "CHEST_TO_PELVIS",
      "CHESTABDPELVIS",
      "COLON",
      "CT 3PHASE REN",
      "CT CHEST WO CE",
      "CT THORAX W CNT",
      "ESOPHAGUS",
      "EXTREMITY",
      "FUSION",
      "HEAD",
      "HEAD-NECK",
      "HEADANDNECK",
      "HEADNECK",
      "HEART",
      "J BRZUSZNA",
      "KIDNEY",
      "LEG",
      "LIVER",
      "LUMBO-SACRAL SP",
      "LUNG",
      "MEDIASTINUM",
      "NECK",
      "OVARY",
      "PANCREAS",
      "PELVIS",
      "PHANTOM",
      "PROSTATE",
      "RECTUM",
      "SEG",
      "SELLA",
      "SKULL",
      "STOMACH",
      "TH CT CHEST WO",
      "THORAX_1HEAD_NE",
      "THYROID",
      "TSPINE",
      "UNDEFINED",
      "UTERUS",
      "WO INTER"
      ]

  fileMetadata:
    type: "object"
    properties:
      access:
        type: "string"
      acl:
        type: "string"
      case_barcode:
        type: "string"
      case_gdc_id:
        type: "string"
      data_category:
        type: "string"
      data_format:
        type: "string"
      data_type:
        type: "string"
      disease_code:
        type: "string"
      experimental_strategy:
        type: "string"
      file_gdc_id:
        type: "string"
      file_name_key:
        type: "string"
      file_size:
        type: "number"
      index_file_id:
        type: "string"
      index_file_name_key:
        type: "string"
      index_file_size:
        type: "string"
      platform:
        type: "string"
      program_name:
        type: "string"
      project_short_name:
        type: "string"
      sample_barcode:
        type: "string"
      sample_gdc_id:
        type: "string"
      type:
        type: "string"

  fileFilterSet:
    type: "object"
    properties:
      access:
        type: "array"
        items:
          type: "string"
      acl:
        type: "array"
        items:
          type: "string"
      case_barcode:
        type: "array"
        items:
          type: "string"
      case_gdc_id:
        type: "array"
        items:
          type: "string"
      data_category:
        type: "array"
        items:
          type: "string"
      data_format:
        type: "array"
        items:
          type: "string"
      data_type:
        type: "array"
        items:
          type: "string"
      disease_code:
        type: "array"
        items:
          type: "string"
      experimental_strategy:
        type: "array"
        items:
          type: "string"
      file_gdc_id:
        type: "array"
        items:
          type: "string"
      file_name_key:
        type: "array"
        items:
          type: "string"
      file_size:
        type: "array"
        items:
          type: "integer"
      file_size_lte:
        type: "array"
        items:
          type: "integer"
      file_size_gte:
        type: "array"
        items:
          type: "integer"
      file_size_btw:
        type: "array"
        items:
          type: "integer"
      index_file_id:
        type: "array"
        items:
          type: "string"
      index_file_name_key:
        type: "array"
        items:
          type: "string"
      index_file_size:
        type: "array"
        items:
          type: "integer"
      index_file_size_lte:
        type: "array"
        items:
          type: "integer"
      index_file_size_gte:
        type: "array"
        items:
          type: "integer"
      index_file_size_btw:
        type: "array"
        items:
          type: "integer"
      platform:
        type: "array"
        items:
          type: "string"
      program_name:
        type: "array"
        items:
          type: "string"
      genomic_build:
        type: "string"
        enum: ["HG19", "HG38"]
      offset:
        type: "integer"
        minimum: 0
        default: 0
      page:
        type: "integer"
        minimum: 1
        default: 1
      fetch_count:
        type: "integer"
        minimum: 1
        maximum: 40000
        default: 5000
      project_short_name:
        type: "array"
        items:
          type: "string"
      sample_barcode:
        type: "array"
        items:
          type: "string"
      sample_gdc_id:
        type: "array"
        items:
          type: "string"
      type:
        type: "array"
        items:
          type: "string"
    example:
      data_format: ["SVS"]

  filePathResponse:
    type: "object"
    properties:
      file_paths:
        type: "array"
        items:
          $ref: "#/definitions/filePath"
      code:
        type: "integer"
      notes:
        type: "string"
      uuids_not_found:
        type: "array"
        items:
          type: "string"

  filePath:
    type: "object"
    properties:
      uuid:
        type: "string"
      gcs_path:
        type: "string"


  errorMessage:
    type: "object"
    properties:
      message:
        type: "string"
      code:
        type: "integer"
      not_found:
        type: "array"
        items:
          type: "string"

  accountDetailsResponse:
    type: "object"
    properties:
      dataset_access:
        type: "array"
        items:
          type: "string"
      code:
        type: "integer"

## [START securityDef]
securityDefinitions:
#  # This section configures basic authentication with an API key.
#  api_key:
#    type: "apiKey"
#    name: "key"
#    in: "query"
## [END securityDef]
#  # This section configures authentication using Google API Service Accounts
#  # to sign a json web token. This is mostly used for server-to-server
#  # communication.
#  google_jwt:
#    authorizationUrl: ""
#    flow: "implicit"
#    type: "oauth2"
#    # This must match the 'iss' field in the JWT.
#    x-google-issuer: "jwt-client.endpoints.sample.google.com"
#    # Update this with your service account's email address.
#    x-google-jwks_uri: "https://www.googleapis.com/service_accounts/v1/jwk/YOUR-SERVICE-ACCOUNT-EMAIL"
#    # This must match the "aud" field in the JWT. You can add multiple audiences to accept JWTs from multiple clients.
#    x-google-audiences: "echo.endpoints.sample.google.com"
#  # This section configures authentication using Google App Engine default
#  # service account to sign a json web token. This is mostly used for
#  # server-to-server communication.
#  gae_default_service_account:
#    authorizationUrl: ""
#    flow: "implicit"
#    type: "oauth2"
#    # Replace YOUR-CLIENT-PROJECT-ID with your client project ID.
#    x-google-issuer: "YOUR-CLIENT-PROJECT-ID@appspot.gserviceaccount.com"
#    # Replace YOUR-CLIENT-PROJECT-ID with your client project ID.
#    x-google-jwks_uri: "https://www.googleapis.com/robot/v1/metadata/x509/YOUR-CLIENT-PROJECT-ID@appspot.gserviceaccount.com"
#    # This must match the "aud" field in the JWT. You can add multiple audiences to accept JWTs from multiple clients.
#    x-google-audiences: "echo.endpoints.sample.google.com"
#  # This section configures authentication using a service account
#  # to sign a json web token. This is mostly used for server-to-server
#  # communication.
#  google_service_account:
#    authorizationUrl: ""
#    flow: "implicit"
#    type: "oauth2"
#    # Replace YOUR-SERVICE-ACCOUNT-EMAIL with your service account email.
#    x-google-issuer: "YOUR-SERVICE-ACCOUNT-EMAIL"
#    # Replace YOUR-SERVICE-ACCOUNT-EMAIL with your service account email.
#    x-google-jwks_uri: "https://www.googleapis.com/robot/v1/metadata/x509/YOUR-SERVICE-ACCOUNT-EMAIL"
#    # This must match the "aud" field in the JWT. You can add multiple audiences to accept JWTs from multiple clients.
#    x-google-audiences: "echo.endpoints.sample.google.com"
#  # This section configures authentication using Google OAuth2 ID Tokens.
#  # ID Tokens can be obtained using OAuth2 clients, and can be used to access
#  # your API on behalf of a particular user.
  google_id_token:
    authorizationUrl: ""
    flow: "implicit"
    type: "oauth2"
    x-google-issuer: "https://accounts.google.com"
    x-google-jwks_uri: "https://www.googleapis.com/oauth2/v3/certs"
    # Your OAuth2 client's Client ID must be added here. You can add multiple client IDs to accept tokens form multiple clients.
    x-google-audiences: ""
